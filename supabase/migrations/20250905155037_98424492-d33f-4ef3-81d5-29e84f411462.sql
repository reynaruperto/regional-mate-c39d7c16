-- Enable UUID extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Drop existing types if they exist (for clean initialization)
DROP TYPE IF EXISTS user_type CASCADE;
DROP TYPE IF EXISTS state CASCADE;
DROP TYPE IF EXISTS business_tenure CASCADE;
DROP TYPE IF EXISTS employee_count CASCADE;
DROP TYPE IF EXISTS pay_range CASCADE;
DROP TYPE IF EXISTS min_rate CASCADE;
DROP TYPE IF EXISTS max_rate CASCADE;
DROP TYPE IF EXISTS pay_type CASCADE;
DROP TYPE IF EXISTS job_status CASCADE;
DROP TYPE IF EXISTS job_type_enum CASCADE;
DROP TYPE IF EXISTS visa_type CASCADE;
DROP TYPE IF EXISTS nationality CASCADE;

-- Create ENUM types
CREATE TYPE user_type AS ENUM ('whv_maker', 'employer');

CREATE TYPE state AS ENUM (
    'Australian Capital Territory',
    'New South Wales',
    'Northern Territory',
    'Queensland',
    'South Australia',
    'Tasmania',
    'Victoria',
    'Western Australia'
);

CREATE TYPE business_tenure AS ENUM (
    '<1', '1', '2', '3', '4', '5', '6-10', '11-15', '16-20', '20+'
);

CREATE TYPE employee_count AS ENUM (
    '1', '2-5', '6-10', '11-20', '21-50', '51-100', '100+'
);

CREATE TYPE pay_range AS ENUM (
    '$25-30/hour',
    '$30-35/hour',
    '$35-40/hour',
    '$40-45/hour',
    '$45+/hour'
);

CREATE TYPE min_rate AS ENUM (
    '$25', '$30', '$35', '$40', '$45', '$50+'
);

CREATE TYPE max_rate AS ENUM (
    '$25', '$30', '$35', '$40', '$45', '$50+'
);

CREATE TYPE pay_type AS ENUM (
    '/hour', '/day', '/week', '/piece'
);

CREATE TYPE job_status AS ENUM (
    'active', 'inactive', 'draft'
);

CREATE TYPE job_type_enum AS ENUM (
    'Full-time', 'Part-time', 'Casual / Seasonal', 'Contract'
);

CREATE TYPE visa_type AS ENUM (
    'First Work and Holiday Visa (462)',
    'Second Work and Holiday Visa (462)',
    'Third Work and Holiday Visa (462)',
    'First Working Holiday Visa (417)',
    'Second Working Holiday Visa (417)',
    'Third Working Holiday Visa (417)'
);

CREATE TYPE nationality AS ENUM (
    'Belgium', 'Canada', 'Republic of Cyprus', 'Denmark', 'Estonia',
    'France', 'Germany', 'Hong Kong', 'Ireland', 'Italy',
    'Japan', 'Republic of Korea', 'Malta', 'Netherlands', 'Norway',
    'Sweden', 'Taiwan', 'United Kingdom', 'Argentina', 'Austria',
    'Brazil', 'Chile', 'China', 'Czech Republic', 'Ecuador',
    'Greece', 'Hungary', 'India', 'Indonesia', 'Israel',
    'Luxembourg', 'Malaysia', 'Mongolia', 'Papua New Guinea', 'Peru',
    'Poland', 'Portugal', 'San Marino', 'Singapore', 'Slovak Republic',
    'Slovenia', 'Spain', 'Switzerland', 'Thailand', 'TÃ¼rkiye',
    'Uruguay', 'United States of America', 'Vietnam'
);

-- Create tables

-- Profile table (base table for users, references Supabase auth.users)
CREATE TABLE profile (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,
    user_type user_type NOT NULL,
    email TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Industry table
CREATE TABLE industry (
    industry_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE
);

-- Industry role table
CREATE TABLE industry_role (
    industry_role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    industry_id UUID NOT NULL REFERENCES industry(industry_id) ON DELETE CASCADE,
    role TEXT NOT NULL
);

-- Facility table
CREATE TABLE facility (
    facility_id SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name TEXT NOT NULL UNIQUE
);

-- Job type table
CREATE TABLE job_type (
    type_id SMALLINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    type TEXT NOT NULL UNIQUE
);

-- License table
CREATE TABLE license (
    license_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name TEXT NOT NULL UNIQUE
);

-- WHV maker table (references profile.user_id, not profile.id)
CREATE TABLE whv_maker (
    user_id UUID PRIMARY KEY REFERENCES profile(user_id) ON DELETE CASCADE,
    given_name TEXT NOT NULL,
    middle_name TEXT,
    family_name TEXT NOT NULL,
    birth_date DATE NOT NULL,
    nationality nationality NOT NULL,
    tagline VARCHAR(500),
    mobile_num CHAR(10),
    address_line1 TEXT,
    address_line2 TEXT,
    suburb TEXT,
    city TEXT,
    state state,
    postcode CHAR(4),
    is_profile_visible BOOLEAN DEFAULT true,
    profile_photo TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Maker work experience table
CREATE TABLE maker_work_experience (
    work_experience_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    industry TEXT,
    company TEXT,
    position TEXT,
    start_date DATE,
    end_date DATE,
    location TEXT
);

-- Maker preference table - FIXED: Changed industry_id to UUID to match industry table
CREATE TABLE maker_preference (
    preference_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL UNIQUE REFERENCES profile(user_id) ON DELETE CASCADE,
    state state,
    suburb_city TEXT,
    industry_id UUID REFERENCES industry(industry_id),
    industry_role_id UUID REFERENCES industry_role(industry_role_id)
);

-- Maker license junction table
CREATE TABLE maker_license (
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    license_id UUID NOT NULL REFERENCES license(license_id) ON DELETE CASCADE,
    other TEXT,
    PRIMARY KEY (user_id, license_id)
);

-- Maker reference table
CREATE TABLE maker_reference (
    reference_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    name TEXT,
    business_name TEXT,
    email TEXT,
    mobile_num CHAR(10),
    role TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Maker visa junction table
CREATE TABLE maker_visa (
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    visa_type visa_type NOT NULL,
    expiry_date DATE NOT NULL,
    PRIMARY KEY (user_id, visa_type)
);

-- Employer table (references profile.user_id, not profile.id)
CREATE TABLE employer (
    user_id UUID PRIMARY KEY REFERENCES profile(user_id) ON DELETE CASCADE,
    given_name TEXT NOT NULL,
    middle_name TEXT,
    family_name TEXT,
    abn CHAR(11),
    company_name TEXT,
    tagline VARCHAR(500),
    business_tenure business_tenure,
    employee_count employee_count,
    mobile_num CHAR(10),
    website TEXT,
    pay_range pay_range,
    profile_photo TEXT,
    address_line1 TEXT,
    address_line2 TEXT,
    suburb_city TEXT,
    state state,
    postcode CHAR(4),
    industry_id UUID REFERENCES industry(industry_id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Employer facility junction table
CREATE TABLE employer_facility (
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    facility_id SMALLINT NOT NULL REFERENCES facility(facility_id) ON DELETE CASCADE,
    other TEXT,
    PRIMARY KEY (user_id, facility_id)
);

-- Employer job type junction table
CREATE TABLE employer_job_type (
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    type_id SMALLINT NOT NULL REFERENCES job_type(type_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, type_id)
);

-- Job table
CREATE TABLE job (
    job_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    role TEXT NOT NULL,
    description VARCHAR(500) NOT NULL,
    job_type job_type_enum NOT NULL,
    min_rate min_rate NOT NULL,
    max_rate max_rate NOT NULL,
    pay_type pay_type NOT NULL,
    requires_experience BOOLEAN DEFAULT false,
    job_status job_status NOT NULL DEFAULT 'draft',
    suburb_city TEXT,
    postcode CHAR(4),
    state state,
    user_id UUID NOT NULL REFERENCES profile(user_id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Job license junction table
CREATE TABLE job_license (
    job_id BIGINT NOT NULL REFERENCES job(job_id) ON DELETE CASCADE,
    license_id UUID NOT NULL REFERENCES license(license_id) ON DELETE CASCADE,
    other TEXT,
    PRIMARY KEY (job_id, license_id)
);

-- Insert predefined industry data
INSERT INTO industry (name) VALUES
    ('Healthcare & Medical (Critical Sectors)'),
    ('Tourism & Hospitality'),
    ('Construction'),
    ('Natural Disaster Recovery'),
    ('Mining'),
    ('Plant & Animal Cultivation'),
    ('Tree Farming & Felling'),
    ('Fishing & Pearling');

-- Insert industry roles
WITH industry_mappings AS (
    SELECT industry_id, name FROM industry
)
INSERT INTO industry_role (industry_id, role)
SELECT 
    industry_id,
    role
FROM (
    -- Plant & Animal Cultivation roles
    SELECT industry_id, 'Fruit Picker' as role FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    SELECT industry_id, 'Packer' FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    SELECT industry_id, 'Dairy Worker' FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    SELECT industry_id, 'Livestock Worker' FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    SELECT industry_id, 'Horse Breeder' FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    SELECT industry_id, 'Reforestation Worker' FROM industry_mappings WHERE name = 'Plant & Animal Cultivation'
    UNION ALL
    
    -- Fishing & Pearling roles
    SELECT industry_id, 'Deckhand' FROM industry_mappings WHERE name = 'Fishing & Pearling'
    UNION ALL
    SELECT industry_id, 'Aquaculture Worker' FROM industry_mappings WHERE name = 'Fishing & Pearling'
    UNION ALL
    SELECT industry_id, 'Pearl Diver' FROM industry_mappings WHERE name = 'Fishing & Pearling'
    UNION ALL
    
    -- Tree Farming & Felling roles
    SELECT industry_id, 'Tree Planter' FROM industry_mappings WHERE name = 'Tree Farming & Felling'
    UNION ALL
    SELECT industry_id, 'Logger' FROM industry_mappings WHERE name = 'Tree Farming & Felling'
    UNION ALL
    SELECT industry_id, 'Timber Transport Worker' FROM industry_mappings WHERE name = 'Tree Farming & Felling'
    UNION ALL
    
    -- Mining roles
    SELECT industry_id, 'Driller' FROM industry_mappings WHERE name = 'Mining'
    UNION ALL
    SELECT industry_id, 'Truck Driver' FROM industry_mappings WHERE name = 'Mining'
    UNION ALL
    SELECT industry_id, 'Quarry Operator' FROM industry_mappings WHERE name = 'Mining'
    UNION ALL
    SELECT industry_id, 'Exploration Worker' FROM industry_mappings WHERE name = 'Mining'
    UNION ALL
    
    -- Construction roles
    SELECT industry_id, 'Labourer' FROM industry_mappings WHERE name = 'Construction'
    UNION ALL
    SELECT industry_id, 'Painter' FROM industry_mappings WHERE name = 'Construction'
    UNION ALL
    SELECT industry_id, 'Scaffolder' FROM industry_mappings WHERE name = 'Construction'
    UNION ALL
    SELECT industry_id, 'Site Cleaner' FROM industry_mappings WHERE name = 'Construction'
    UNION ALL
    
    -- Tourism & Hospitality roles
    SELECT industry_id, 'Chef' FROM industry_mappings WHERE name = 'Tourism & Hospitality'
    UNION ALL
    SELECT industry_id, 'Bartender' FROM industry_mappings WHERE name = 'Tourism & Hospitality'
    UNION ALL
    SELECT industry_id, 'Waitstaff' FROM industry_mappings WHERE name = 'Tourism & Hospitality'
    UNION ALL
    SELECT industry_id, 'Housekeeper' FROM industry_mappings WHERE name = 'Tourism & Hospitality'
    UNION ALL
    SELECT industry_id, 'Tour Guide' FROM industry_mappings WHERE name = 'Tourism & Hospitality'
    UNION ALL
    
    -- Natural Disaster Recovery roles
    SELECT industry_id, 'Clean-up Crew' FROM industry_mappings WHERE name = 'Natural Disaster Recovery'
    UNION ALL
    SELECT industry_id, 'Rebuilder' FROM industry_mappings WHERE name = 'Natural Disaster Recovery'
    UNION ALL
    SELECT industry_id, 'Wildlife Carer' FROM industry_mappings WHERE name = 'Natural Disaster Recovery'
    UNION ALL
    
    -- Healthcare & Medical roles
    SELECT industry_id, 'Nurse' FROM industry_mappings WHERE name = 'Healthcare & Medical (Critical Sectors)'
    UNION ALL
    SELECT industry_id, 'Aged Care Worker' FROM industry_mappings WHERE name = 'Healthcare & Medical (Critical Sectors)'
    UNION ALL
    SELECT industry_id, 'Disability Support' FROM industry_mappings WHERE name = 'Healthcare & Medical (Critical Sectors)'
    UNION ALL
    SELECT industry_id, 'Childcare Worker' FROM industry_mappings WHERE name = 'Healthcare & Medical (Critical Sectors)'
    UNION ALL
    SELECT industry_id, 'Cleaner' FROM industry_mappings WHERE name = 'Healthcare & Medical (Critical Sectors)'
) AS roles;

-- Insert predefined facility data
INSERT INTO facility (name) VALUES
    ('Accommodation provided'),
    ('Meals included'),
    ('Transport provided'),
    ('Training provided'),
    ('Equipment provided'),
    ('Flexible hours'),
    ('Career progression'),
    ('Team environment'),
    ('Other');

-- Insert predefined job type data
INSERT INTO job_type (type) VALUES
    ('Full-time'),
    ('Part-time'),
    ('Casual'),
    ('Seasonal'),
    ('Contract');

-- Insert predefined license data
INSERT INTO license (name) VALUES
    ('White Card (Construction)'),
    ('RSA (Responsible Service of Alcohol)'),
    ('RSG (Responsible Service of Gaming)'),
    ('Food Safety Supervisor'),
    ('First Aid Certificate'),
    ('Driver''s License'),
    ('Forklift License'),
    ('Working at Heights'),
    ('Manual Handling'),
    ('Chemical Handling'),
    ('Other');

-- Create indexes for better performance
CREATE INDEX idx_profile_user_type ON profile(user_type);
CREATE INDEX idx_profile_email ON profile(email);
CREATE INDEX idx_profile_user_id ON profile(user_id);
CREATE INDEX idx_whv_maker_nationality ON whv_maker(nationality);
CREATE INDEX idx_whv_maker_state ON whv_maker(state);
CREATE INDEX idx_employer_state ON employer(state);
CREATE INDEX idx_employer_industry ON employer(industry_id);
CREATE INDEX idx_job_status ON job(job_status);
CREATE INDEX idx_job_user ON job(user_id);
CREATE INDEX idx_job_state ON job(state);
CREATE INDEX idx_job_type ON job(job_type);
CREATE INDEX idx_maker_preference_user ON maker_preference(user_id);
CREATE INDEX idx_maker_work_experience_user ON maker_work_experience(user_id);
CREATE INDEX idx_industry_role_industry ON industry_role(industry_id);

-- Create updated_at trigger function
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Apply updated_at trigger to relevant tables
CREATE TRIGGER update_profile_updated_at BEFORE UPDATE ON profile
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_maker_reference_updated_at BEFORE UPDATE ON maker_reference
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_whv_maker_updated_at BEFORE UPDATE ON whv_maker
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_employer_updated_at BEFORE UPDATE ON employer
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_job_updated_at BEFORE UPDATE ON job
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Row Level Security (RLS) Policies
-- Enable RLS on all tables
ALTER TABLE profile ENABLE ROW LEVEL SECURITY;
ALTER TABLE whv_maker ENABLE ROW LEVEL SECURITY;
ALTER TABLE employer ENABLE ROW LEVEL SECURITY;
ALTER TABLE maker_work_experience ENABLE ROW LEVEL SECURITY;
ALTER TABLE maker_preference ENABLE ROW LEVEL SECURITY;
ALTER TABLE maker_license ENABLE ROW LEVEL SECURITY;
ALTER TABLE maker_reference ENABLE ROW LEVEL SECURITY;
ALTER TABLE maker_visa ENABLE ROW LEVEL SECURITY;
ALTER TABLE employer_facility ENABLE ROW LEVEL SECURITY;
ALTER TABLE employer_job_type ENABLE ROW LEVEL SECURITY;
ALTER TABLE job ENABLE ROW LEVEL SECURITY;
ALTER TABLE job_license ENABLE ROW LEVEL SECURITY;

-- Profile policies
CREATE POLICY "Users can view their own profile" ON profile
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own profile" ON profile
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own profile" ON profile
    FOR UPDATE USING (auth.uid() = user_id);

-- WHV Maker policies
CREATE POLICY "Users can view their own whv_maker profile" ON whv_maker
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own whv_maker profile" ON whv_maker
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own whv_maker profile" ON whv_maker
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Public can view visible whv_maker profiles" ON whv_maker
    FOR SELECT USING (is_profile_visible = true);

-- Employer policies
CREATE POLICY "Users can view their own employer profile" ON employer
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own employer profile" ON employer
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own employer profile" ON employer
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Public can view employer profiles" ON employer
    FOR SELECT USING (true);

-- Job policies
CREATE POLICY "Public can view active jobs" ON job
    FOR SELECT USING (job_status = 'active');

CREATE POLICY "Employers can view their own jobs" ON job
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Employers can insert their own jobs" ON job
    FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Employers can update their own jobs" ON job
    FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Employers can delete their own jobs" ON job
    FOR DELETE USING (auth.uid() = user_id);

-- Additional RLS policies for junction tables
CREATE POLICY "Users can manage their own work experience" ON maker_work_experience
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own preferences" ON maker_preference
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own licenses" ON maker_license
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own references" ON maker_reference
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own visa info" ON maker_visa
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own facilities" ON employer_facility
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own job types" ON employer_job_type
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage their own job licenses" ON job_license
    FOR ALL USING (auth.uid() IN (SELECT user_id FROM job WHERE job_id = job_license.job_id));

-- Public read access for reference tables
ALTER TABLE industry ENABLE ROW LEVEL SECURITY;
ALTER TABLE industry_role ENABLE ROW LEVEL SECURITY;
ALTER TABLE facility ENABLE ROW LEVEL SECURITY;
ALTER TABLE job_type ENABLE ROW LEVEL SECURITY;
ALTER TABLE license ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public can read industries" ON industry FOR SELECT USING (true);
CREATE POLICY "Public can read industry roles" ON industry_role FOR SELECT USING (true);
CREATE POLICY "Public can read facilities" ON facility FOR SELECT USING (true);
CREATE POLICY "Public can read job types" ON job_type FOR SELECT USING (true);
CREATE POLICY "Public can read licenses" ON license FOR SELECT USING (true);

-- Create function to automatically create profile on user signup
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profile (user_id, user_type, email)
  VALUES (
    NEW.id, 
    COALESCE(NEW.raw_user_meta_data ->> 'user_type', 'whv_maker')::user_type,
    NEW.email
  );
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create profile on new user
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- Helper function to get full storage URL for profile photos
CREATE OR REPLACE FUNCTION get_profile_photo_url(path TEXT)
RETURNS TEXT AS $$
BEGIN
    IF path IS NULL THEN
        RETURN NULL;
    END IF;
    -- Updated with the actual project URL
    RETURN 'https://xiymsnmlwffikkhwatcp.supabase.co/storage/v1/object/public/' || path;
END;
$$ LANGUAGE plpgsql IMMUTABLE;